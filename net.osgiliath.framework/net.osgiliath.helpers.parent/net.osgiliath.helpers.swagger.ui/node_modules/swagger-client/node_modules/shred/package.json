{
  "name": "shred",
  "version": "0.8.10",
  "description": "A simple HTTP client for Node.js and browsers.  Supports gzip, cookies, redirects, and https.",
  "keywords": [
    "http",
    "client"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/automatthew/shred/blob/master/LICENSE"
    }
  ],
  "homepage": "https://github.com/automatthew/shred",
  "bugs": {
    "url": "https://github.com/automatthew/shred/issues"
  },
  "author": {
    "name": "Dan Yoder",
    "email": "daniel.yoder@gmail.com"
  },
  "maintainers": [
    {
      "name": "Dan Yoder",
      "email": "daniel.yoder@gmail.com"
    },
    {
      "name": "Matthew King",
      "email": "automatthew@gmail.com"
    }
  ],
  "contributors": [
    {
      "name": "Dan Yoder",
      "email": "daniel.yoder@gmail.com"
    },
    {
      "name": "Jason Campbell"
    },
    {
      "name": "Matthew King",
      "email": "automatthew@gmail.com"
    },
    {
      "name": "Nicolas LaCasse"
    },
    {
      "name": "Andy Burke",
      "email": "aburke@bitflood.org"
    }
  ],
  "main": "./lib/shred.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/automatthew/shred.git"
  },
  "files": [
    "lib"
  ],
  "dependencies": {
    "sprintf": "0.1.1",
    "ax": "0.1.8",
    "cookiejar": "1.3.1",
    "iconv-lite": ">= 0.1.2"
  },
  "devDependencies": {
    "coffee-script": "1.4.x",
    "testify": "0.2.x",
    "express": "2.5.10",
    "browserify": "1.8.3",
    "http-browserify": "https://github.com/spire-io/http-browserify/tarball/master",
    "uglify-js": "~1.2.5",
    "docco": "~0.3.0"
  },
  "scripts": {
    "test": "node_modules/.bin/coffee test/tests.coffee"
  },
  "engine": "node >= 0.8.x",
  "readme": "# Introduction\n\nShred is an HTTP client library for node.js and browsers.\nShred supports gzip, cookies, https, proxies, and redirects.\n\n# Installation\n\n## Node.js\n\nShred can be installed through npm.\n\n    npm install shred\n\n## Browsers\n\nWe use [Browserify](https://github.com/substack/node-browserify) to bundle Shred and all of its dependencies in one javascript file.\nSimply include the bundled version of shred in a script tag.\n\n    <script src=\"browser/shred.bundle.js\" />\n\nIf you want smaller downloads, use the minified version.\n\n    <script src=\"browser/shred.bundle.min.js\" />\n\n# Basic Usage\n\nFirst we need to require the Shred library and instantiate a new client.\n\nBrowser:\n\n    var Shred = require(\"./shred\");\n    var shred = new Shred();\n\nNode.js:\n\n    var Shred = require(\"shred\");\n    var shred = new Shred();\n\nThen we are ready to use `shred` to make HTTP requests.\n\n## Simple GET request\n\nHere is a simple GET request that gets some JSON data.\n\n\n```javascript\nvar req = shred.get({\n  url: \"http://api.spire.io/\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  on: {\n    // You can use response codes as events\n    200: function(response) {\n      // Shred will automatically JSON-decode response bodies that have a\n      // JSON Content-Type\n      console.log(response.content.data);\n    },\n    // Any other response means something's wrong\n    response: function(response) {\n      console.log(\"Oh no!\");\n    }\n  }\n});\n```\n\n## Response Handling\n\nShred uses HTTP status codes as event names.\nThe above example has a handler for when the response comes back with status 200, and a catch-all \"request\" handler for all other cases.\n\nYou can also add listeners to the \"success\" event, the \"error\" event, and the most generic \"response\" event.\nShred makes sure that only the most specific event handler gets called for a response.\n\n## JSON Decoding\n\nShred will automatically decode JSON bodies if the response headers' Content-Type identifies it as JSON.\nThus, we are able to get the to the decoded object with `response.content.data`.\nThe original string representation is still available to us, in `response.content.body`.\n\nHere is a POST to an accounts resource.\nShred will automatically JSON-encode the POST body.\nWe have handlers for the 201 \"Created\" status, 409 \"Conflict\" status, and a catch-all \"response\" handler.\n\n## Simple POST request\n\n```javascript\nvar req = shred.post({\n  url: \"http://localhost:8080/accounts\",\n  headers: {\n    Content-Type: \"application/json\"\n  },\n  // Shred will JSON-encode PUT/POST bodies\n  content: { username: \"fred\", email: \"fred@flinstone.com\" },\n  on: {\n    // you can use response codes as events\n    201: function(response) {\n      console.log(\"User Created\");\n    },\n    409: function (response) {\n      console.log(\"User with that name already exists.\");\n    },\n    response: function(response) {\n      // We got a 40X that is not a 409, or a 50X\n      console.log(\"Oh no, something went wrong!\");\n    }\n  }\n});\n```\n\nYou can pass listeners directly into the shred request call, as in the above examples, or add listeners to the request with the `on` method:\n\n```javascript\nreq.on({\n  404: function(response) {\n    console.log(\"Not Found\");\n  },\n  500: function(response) {\n    console.log(\"Server Error, please try again later.\");\n  }\n});\n```\n\nYou can also chain the events with 'on', if that's your style.\n\n```javascript\nreq.on(\n  404,\n  function(response) {\n    console.log(\"Not Found\");\n}).on(500 function(response) {\n    console.log(\"Server Error, please try again later.\");\n});\n```\n\nSee [the wiki](https://github.com/automatthew/shred/wiki) for more examples.\n\nAlso, we wrote [a blog post][blog] on why we wrote Shred instead of going with existing libraries.\n\n# Interface\n\nShred has 4 methods: `shred.get`, `shred.put`, `shred.delete`, and `shred.post`.\n\n## Request Options\n\n* `url`: url to make the request to\n* `headers`: hash of headers to send with the request\n* `port`: port to send the request to\n* `query`: hash or string to send as the query parameters\n* `content`: data to send in the body of the request (also aliased to `body`)\n* `timeout`: length of time in ms (or a date structure with hours/minutes/seconds/millis) to wait before killing the connection\n* `proxy`: url of http proxy to use\n\n## Even more examples!\n\n### timeouts\n\n```javascript\nvar req = shred.get({\n  url: \"http://api.spire.io/\",\n  timeout: 1000, // time out in just 1 second\n  on: {\n    response: function(response) {\n      console.log(response.content.data);\n    },\n    // let's watch for a timeout\n    timeout: function( request ) {\n      // note: we get the request here, not the response (since there was no response, silly!)\n      console.log( 'Ooops, we timed out!' );\n    }\n  }\n});\n\n// or we can pass an object with values like 'minutes', 'seconds' and 'milliseconds'\nvar req = shred.get({\n  url: \"http://api.spire.io/\",\n  timeout: { minutes: 1, seconds: 30 }, // time out in 1 minute and 30 seconds\n  on: {\n    response: function(response) {\n      console.log(response.content.data);\n    },\n    // let's watch for a timeout\n    timeout: function( request ) {\n      console.log( 'Ooops, we timed out!' );\n    }\n  }\n});\n\n```\n\n## Events\n\nShred will fire an event with the status code of the response, if that event has any listeners.\nIf the status code has no listeners, Shred will fire the \"success\" event or the \"error\" event, depending on whether the http response is a success (2XX) or error (4XX and 5XX).\nIf the success/error event has no listeners, Shred will fire the most generic \"response\" event.\n\nShred will also emit a \"request_error\" event if the request errors out before a response comes back.\n\n## Response\n\nThe response is passed as the only argument to the event listeners.\nIt has the following properties.\n\n* `response.status`: status code of the response\n* `response.isError`: true iff the status code is >= 400\n* `response.content.body`: string representation of the response body\n* `response.content.data`: javascript object for the response body (if the Content-Type is JSON)\n\n# Curl Logging\n\nShred can log all of the requests it makes as [curl][curl] commands.\nYou can use this to make requests from the command line with curl.\n\nTo enable this logging, set the `logCurl` option when initializing Shred.\n\n    var shred = new Shred({ logCurl: true });\n\nHere is sample output from a shred request:\n\n    curl -X GET http://localhost:1337 -H \"Accept: application/json\" \n\n\n# Feedback\n\nFeedback is highly encouraged in the form of [tickets][tickets] or pull requests. Thank you!\n\n# Code\n\n[Browse the annotated source.][docs]\n\nWe'd love your contributions - don't hesitate to send us pull requests. We'll also happily add you as a committer after we've accepted it.\n\n# Tests\n\nYou can run the tests in node with\n\n    cake test\n\nThere is currently no way to run the tests in the browser (coming soon...)\n\n\n# License\n\nShred is MIT licensed.\n\n# Authors\n\nShred is based on code originally written by Matthew King.\nThat code was adapted and converted into a separate Node.js library by Dan Yoder, Jason Campbell, Nick LaCasse, and Vicent Piquer Suria.\n\nCurrent maintainers:  [Dan Yoder][yoder], [Matthew King][king]\n\n[code]: https://github.com/automatthew/shred\n[tickets]: https://github.com/automatthew/shred/issues\n[license]: https://github.com/automatthew/shred/blob/master/LICENSE\n[yoder]: mailto:daniel.yoder@gmail.com\n[king]: mailto:automatthew@gmail.com\n[curl]: http://curl.haxx.se/\n[blog]: http://webcache.googleusercontent.com/search?q=cache:6RFaj1yLIZEJ:www.spire.io/posts/introducing-shred.html+http://www.spire.io/posts/introducing-shred.html&cd=1&hl=en&ct=clnk&gl=us\n",
  "readmeFilename": "README.md",
  "_id": "shred@0.8.10",
  "_from": "shred@0.8.10"
}
