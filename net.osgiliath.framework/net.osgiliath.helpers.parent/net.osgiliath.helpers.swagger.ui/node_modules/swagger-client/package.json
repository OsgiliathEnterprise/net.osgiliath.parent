{
  "name": "swagger-client",
  "author": {
    "name": "Zeke Sikelianos",
    "email": "zeke@sikelianos.com"
  },
  "contributors": [
    {
      "name": "Tony Tam",
      "email": "fehguy@gmail.com"
    }
  ],
  "description": "swagger.js is a javascript client for use with swaggering APIs.",
  "version": "2.0.29",
  "homepage": "http://swagger.wordnik.com",
  "repository": {
    "type": "git",
    "url": "git://github.com/wordnik/swagger-js.git"
  },
  "main": "lib/swagger.js",
  "scripts": {
    "build": "PATH=$PATH:./node_modules/.bin cake bake",
    "dev": "PATH=$PATH:./node_modules/.bin cake dev",
    "test": "open spec.html"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "dependencies": {
    "shred": "0.8.10",
    "btoa": "1.1.1"
  },
  "devDependencies": {
    "coffee-script": "~1.5.0"
  },
  "license": "apache 2.0",
  "readme": "# Swagger JS library\n\nThis is the Wordnik Swagger javascript client for use with [swagger](http://swagger.wordnik.com) enabled APIs.\nIt's written in CoffeeScript and tested with Jasmine, and is the fastest way to enable a javascript client to communicate with a swagger-enabled server.\n\n## What's Swagger?\n\nThe goal of Swaggerâ„¢ is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via Swagger, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, Swager removes the guesswork in calling the service.\n\n\nCheck out [Swagger-Spec](https://github.com/wordnik/swagger-spec) for additional information about the Swagger project, including additional libraries with support for other languages and more. \n\n\n### Calling an API with swagger + node.js!\n\nInstall swagger-client:\n```\nnpm install swagger-client\n```\n\nThen let swagger do the work!\n```js\nvar client = require(\"swagger-client\")\n\nvar swagger = new client.SwaggerApi({\n  url: 'http://petstore.swagger.wordnik.com/api/api-docs',\n  success: function() {\n    if(swagger.ready === true) {\n      swagger.apis.pet.getPetById({petId:1});\n    }\n  }\n});\n\n```\n\nThat's it!  You'll get a JSON response with the default callback handler:\n\n```json\n{\n  \"id\": 1,\n  \"category\": {\n    \"id\": 2,\n    \"name\": \"Cats\"\n  },\n  \"name\": \"Cat 1\",\n  \"photoUrls\": [\n    \"url1\",\n    \"url2\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"tag1\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"tag2\"\n    }\n  ],\n  \"status\": \"available\"\n}\n```\n\nNeed to pass an API key?  Configure one as a querystring:\n\n```js\nclient.authorizations.add(\"apiKey\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"query\"));\n```\n\n...or with a header:\n\n```js\nclient.authorizations.add(\"apiKey\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"header\"));\n```\n\n### Calling an API with swagger + the browser!\n\nDownload `swagger.js` and `shred.bundle.js` into your lib folder\n\n```js\n<script src='lib/shred.bundle.js' type='text/javascript'></script>\n<script src='lib/swagger.js' type='text/javascript'></script>\n<script type=\"text/javascript\">\n  // initialize swagger, point to a resource listing\n  window.swagger = new SwaggerApi({\n    url: \"http://petstore.swagger.wordnik.com/api/api-docs.json\",\n    success: function() {\n      if(swagger.ready === true) {\n        // upon connect, fetch a pet and set contents to element \"mydata\"\n        swagger.apis.pet.getPetById({petId:1}, function(data) {\n          document.getElementById(\"mydata\").innerHTML = data.content.data;\n        });\n      }\n    }\n  });\n\n</script>\n```\n\n### Need to send an object to your API via POST or PUT?\n```js\nvar body = {\n  id: 100,\n  name: \"dog\"};\n\nswagger.apis.pet.addPet({body: JSON.stringify(body)});\n```\n\n### Sending XML in as a payload to your API?\n```js\nvar body = \"<Pet><id>2</id><name>monster</name></Pet>\";\n\nswagger.apis.pet.addPet({body: body},{requestContentType:\"application/xml\"});\n```\n\n### Need XML response?\n```js\nswagger.apis.pet.getPetById({petId:1},{responseContentType:\"application/xml\"});\n```\n\n### How does it work?\nThe swagger javascript client reads the swagger api definition directly from the server.  As it does, it constructs a client based on the api definition, which means it is completely dynamic.  It even reads the api text descriptions (which are intended for humans!) and provides help if you need it:\n\n```js\ns.apis.pet.getPetById.help()\n'* petId (required) - ID of pet that needs to be fetched'\n```\n\nThe HTTP requests themselves are handled by the excellent [shred](https://github.com/automatthew/shred) library, which has a ton of features itself.  But it runs on both node and the browser.\n\n\nDevelopment\n-----------\n\nPlease [fork the code](https://github.com/wordnik/swagger-js) and help us improve\nswagger.js. Send us a pull request and **we'll mail you a wordnik T-shirt!**\n\nSwagger.js is written in CoffeeScript, so you'll need Node.js and the\nCoffeeScript compiler. For more detailed installation instructions, see\n[coffeescript.org/#installation](http://coffeescript.org/#installation).\n\n```bash\n# generate the javascript libraries and put them in the `lib` folder\n\nnpm run-script build\n```\n\n```bash\n# The 'dev' task will:\n# 1. Open source files in your $EDITOR\n# 2. Open and run the Jasmine specs in your browser.\n# 3. Watch for changes to CoffeeScript files and auto-compile them to Javascript.\n\nnpm run-script dev\n\n# List all cake tasks:\ncake\n```\n\nLicense\n-------\n\nCopyright 2011-2014 Wordnik, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n[apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wordnik/swagger-js/issues"
  },
  "_id": "swagger-client@2.0.29",
  "dist": {
    "shasum": "3559c91dab83939265a14ec02b4569d5de3cdbdf"
  },
  "_from": "swagger-client@2.0.29",
  "_resolved": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.0.29.tgz"
}
